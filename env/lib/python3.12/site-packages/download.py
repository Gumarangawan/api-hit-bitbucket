import requests
from requests.auth import HTTPBasicAuth
from prettytable import PrettyTable
import pandas as pd
from datetime import datetime, timedelta
import pytz

# Konfigurasi akses ke API Bitbucket
USERNAME = ''
APP_PASSWORD = ''
WORKSPACE = ''
REPO_SLUG = ''
BRANCH_NAME = ''

def fetch_commit_diff_stats(workspace, repo_slug, commit_hash):
    """Mengambil statistik diff dari commit tertentu."""
    url = f"https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/diffstat/{commit_hash}"
    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, APP_PASSWORD))
    if response.status_code == 200:
        data = response.json()
        lines_added = sum(change['lines_added'] for change in data['values'])
        lines_removed = sum(change['lines_removed'] for change in data['values'])
        return lines_added, lines_removed
    else:
        return 0, 0

def fetch_commits_and_loc(workspace, repo_slug, branch_name):
    """Mengambil data commit dan LOC dari Bitbucket."""
    url = f"https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/commits/{branch_name}"
    commits = []
    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, APP_PASSWORD))
    while response.status_code == 200:
        data = response.json()
        for commit in data['values']:
            lines_added, lines_removed = fetch_commit_diff_stats(workspace, repo_slug, commit['hash'])
            commit['lines_added'] = lines_added
            commit['lines_removed'] = lines_removed
            commits.append(commit)
        next_page = data.get('next', None)
        if not next_page:
            break
        response = requests.get(next_page, auth=HTTPBasicAuth(USERNAME, APP_PASSWORD))
    return commits

def main():
    commits = fetch_commits_and_loc(WORKSPACE, REPO_SLUG, BRANCH_NAME)
    
    total_commits = len(commits)
    print(f"\033[1mTotal Commits:\033[0m {len(commits)}")

    table = PrettyTable()
    table.field_names = ["Author", "Commit ID", "Date", "LOC Added", "LOC Removed", "Work Hours Estimation"]

    
    # Initialize data_for_df with headers or any preliminary data
    data_for_df = []

    # Optionally, add special rows for total commits and a note
    special_rows = [
        ["Total Commits:", str(total_commits), "", "", "", ""],
        ["Note:", "Cara Menghitung Work Estimation...", "", "", "", ""]
    ]

      # Prepend special rows to your DataFrame data
    data_for_df.extend(special_rows)

    previous_commit_date = None
    for commit in commits:
        author_name = commit['author']['user']['display_name'] if 'user' in commit['author'] else "Unknown"
        commit_id = commit['hash']
        date = commit['date']
        loc_added = commit['lines_added']
        loc_removed = commit['lines_removed']

        # Konversi tanggal ke dalam zona waktu yang diinginkan
        commit_date = datetime.strptime(date, "%Y-%m-%dT%H:%M:%S%z")
        commit_date = commit_date.astimezone(pytz.timezone('Asia/Jakarta'))

        work_hours_estimation = ""
        if previous_commit_date:
            time_diff = commit_date - previous_commit_date
            hours, remainder = divmod(time_diff.total_seconds(), 3600)
            minutes, _ = divmod(remainder, 60)
            work_hours_estimation = f"{int(hours)}:{int(minutes):02d}"

        row = [author_name, commit_id, commit_date.strftime("%Y-%m-%d %H:%M:%S"), loc_added, loc_removed, work_hours_estimation]
        table.add_row(row)
        data_for_df.append(row)
        previous_commit_date = commit_date

    print(table)
    print(f"\033[1mNote:\033[0m Cara Menghitung Work Estimation Adalah dari Bawah ke Atas yang berarti Work Estimasi di tanggal 2 akan mengkalkulasi time interval di tanggal 3")

    df = pd.DataFrame(data_for_df, columns=["Author", "Commit ID", "Date", "LOC Added", "LOC Removed", "Work Hours Estimation"])
    
    # df.to_csv("file_path.csv", index=False, encoding='utf-8-sig')
    df.to_excel("file_path.xlsx", index=False, engine='openpyxl')




if __name__ == "__main__":
    main()